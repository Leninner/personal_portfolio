---
import type { CollectionEntry } from "astro:content";
import BaseHead from "../components/BaseHead.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import FormattedDate from "../components/FormattedDate.astro";

type Props = CollectionEntry<"blog">["data"];

const {
  title,
  description,
  pubDate,
  updatedDate,
  heroImage,
  tags = [],
} = Astro.props;

const TAG_VARIANTS = [
  {
    bg: "bg-red-200",
    text: "text-red-600",
  },
  {
    bg: "bg-blue-200",
    text: "text-blue-600",
  },
  {
    bg: "bg-green-200",
    text: "text-green-600",
  },
  {
    bg: "bg-yellow-200",
    text: "text-yellow-600",
  },
  {
    bg: "bg-indigo-200",
    text: "text-indigo-600",
  },
  {
    bg: "bg-purple-200",
    text: "text-purple-600",
  },
  {
    bg: "bg-pink-200",
    text: "text-pink-600",
  },
  {
    bg: "bg-gray-200",
    text: "text-gray-600",
  },
  {
    bg: "bg-red-200",
    text: "text-red-600",
  }
];
---

<html lang="en">
  <head>
    <BaseHead title={title} description={description} />
    <style is:inline>
      .hero-image {
        width: 100%;
      }
      .hero-image img {
        display: block;
        margin: 0 auto;
        border-radius: 12px;
        box-shadow: var(--box-shadow);
      }
      .prose {
        width: 720px;
        max-width: calc(100% - 2em);
        margin: auto;
        padding: 1em;
        color: rgb(var(--gray-dark));
      }
      .title {
        margin-bottom: 1em;
        padding: 1em 0;
        text-align: center;
        line-height: 1;
      }
      .title h1 {
        margin: 0 0 0.5em 0;
      }
      .date {
        margin-bottom: 0.5em;
        color: rgb(var(--gray));
      }
      .last-updated-on {
        font-style: italic;
      }

      .prose h1,
      h2,
      h3,
      h4,
      h5,
      h6 {
        margin: 35px 0;
        padding: 0;
      }

      .prose h1 {
        font-size: 2.5rem;
        font-weight: 700;
        line-height: 1.2;
      }

      .prose h2 {
        font-size: 2rem;
        font-weight: 700;
        line-height: 1.2;
      }

      .prose h3 {
        font-size: 1.75rem;
        font-weight: 700;
        line-height: 1.2;
      }

      .prose h4 {
        font-size: 1.5rem;
        font-weight: 700;
        line-height: 1.2;
      }

      .prose ul {
        list-style: disc;
        padding-left: 1.5em;
      }

      .prose ul > li {
        margin-bottom: 0.5em;
      }

      .prose ol > ul {
        margin-bottom: 0;
        padding-left: 3rem;
      }

      .prose ol {
        list-style: decimal;
        padding-left: 1.5em;
        margin-bottom: 0 !important;
      }

      .prose a {
        text-decoration: none;
      }

      .prose a:hover {
        text-decoration: underline;
      }

      .prose p {
        margin-bottom: 1em;
      }

      .prose li {
        margin-bottom: 0.5em;
      }

      .prose pre {
        font-size: 0.9em;
        margin: 25px 0;
      }

      @media (max-width: 720px) {
        .prose {
          max-width: 100%;
          width: 100%;
          padding: 0;
        }
      }
    </style>
  </head>

  <body class="cursor-default flex flex-col items-center">
    <Header />

    <main class="container xl px-5">
      <article>
        <div class="hero-image">
          {
            heroImage && (
              <img width={1020} height={510} src={heroImage} alt="" />
            )
          }
        </div>
        <div class="prose">
          <div class="title">
            <div class="date">
              <FormattedDate date={pubDate} />
              {
                updatedDate && (
                  <div class="last-updated-on">
                    Last updated on <FormattedDate date={updatedDate} />
                  </div>
                )
              }
            </div>
            <h1>{title}</h1>

            <div
              class="flex gap-5 md:gap-10 justify-center -mt-4 mb-4 flex-wrap"
            >
              {
                tags.map((tag) => {
                  const variant =
                    TAG_VARIANTS[
                      Math.floor(Math.random() * TAG_VARIANTS.length)
                    ];

                  TAG_VARIANTS.splice(TAG_VARIANTS.indexOf(variant), 1);
                  return (
                    <span
                      class={`px-6 py-2 rounded-full ${variant.bg} ${variant.text}`}
                    >
                      {tag}
                    </span>
                  );
                })
              }
            </div>
            <hr />
          </div>
          <slot />
        </div>
      </article>
    </main>

    <Footer />
  </body>
</html>
